# -*- mode: ruby -*-
# vi: set ft=ruby :

server_ip = "192.168.10.100"

# agents = { "agent1" => "192.168.10.101",
#            "agent2" => "192.168.10.102" }
agents = { "agent1" => "192.168.10.101"}

# Extra parameters in INSTALL_K3S_EXEC variable because of
# K3s picking up the wrong interface when starting server and agent
# https://github.com/alexellis/k3sup/issues/306

server_script = <<-SHELL
    sudo -i
    apk update
    apk add bash curl coreutils sudo openrc iproute2 e2fsprogs tcpdump wget tar
 
    if [ -f /usr/local/bin/k3s-uninstall.sh ]; then
      /usr/local/bin/k3s-uninstall.sh
    fi
    export INSTALL_K3S_EXEC="--bind-address=#{server_ip} --node-external-ip=#{server_ip} --flannel-iface=eth1"
    curl -sfL https://get.k3s.io | sh -
    while [ ! -f /var/lib/rancher/k3s/server/token ]; do
      echo "Sleeping for 2 seconds to wait for k3s to start"
      sleep 2
    done
    sudo chown vagrant:vagrant /etc/rancher/k3s/k3s.yaml
    echo 'export KUBECONFIG=/etc/rancher/k3s/k3s.yaml' >> /etc/profile
    
    sudo cp /var/lib/rancher/k3s/server/token /vagrant_shared
    sudo chmod +r /etc/rancher/k3s/k3s.yaml

    sudo cp /etc/rancher/k3s/k3s.yaml /vagrant_shared
    # petit alias 
    echo "alias k=kubectl" >> /home/vagrant/.bashrc
    echo 'if [ -f ~/.bashrc ]; then source ~/.bashrc; fi' >> /home/vagrant/.profile
    chown vagrant:vagrant /home/vagrant/.bashrc /home/vagrant/.profile
   
SHELL

agent_script = <<-SHELL
    sudo -i
    apk add curl
    if [ -f /usr/local/bin/k3s-agent-uninstall.sh ]; then
      /usr/local/bin/k3s-agent-uninstall.sh
    fi
    export K3S_TOKEN_FILE=/vagrant_shared/token
    export K3S_URL=https://#{server_ip}:6443
    export INSTALL_K3S_EXEC="--flannel-iface=eth1"
    curl -sfL https://get.k3s.io | sh -
SHELL

Vagrant.configure("2") do |config|
  config.vm.box = "generic/alpine319"

  config.vm.define "server", primary: true do |server|
    server.vm.network "public_network", ip: server_ip
    
    server.vm.synced_folder "./shared", "/vagrant_shared"
    server.vm.hostname = "server"
    server.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = "2"
    end
    server.vm.provision "cluster-k3s", type: "shell", inline: server_script
    # server.vm.provision "taint",type: "shell", inline: <<-SHELL 
    # #!/bin/bash
    #   NODE_NAME="server"
    #   echo "⏳ Attente de la création du nœud '$NODE_NAME'..."
    #   # Boucle jusqu'à ce que le nœud apparaisse
    #   while true; do
    #     if kubectl get nodes | grep -w "$NODE_NAME" > /dev/null; then
    #       echo "✅ Nœud '$NODE_NAME' détecté. Application du taint..."
    #       kubectl taint nodes "$NODE_NAME" node-role.kubernetes.io/master=true:NoSchedule
    #       break
    #     else
    #       sleep 2
    #     fi
    #   done
    # SHELL
    

    server.vm.provision "helm", type: "shell", inline: <<-SHELL
    #!/bin/bash
     # installation helm
    echo "installation helm"
    apk add git
    sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
    SHELL

    server.vm.provision "metallb-install", type: "shell", inline: <<-SHELL
    # re creation du namespace vierge après suppression de son contenu
	if kubectl get namespace metallb-system &> /dev/null; then
  		kubectl delete namespace metallb-system
	fi
  helm repo add metallb https://metallb.github.io/metallb
  helm repo update

kubectl create namespace metallb-system

helm install metallb metallb/metallb -n metallb-system
until kubectl get endpointslices -n metallb-system \
  -l kubernetes.io/service-name=metallb-webhook-service \
  -o jsonpath='{.items[*].endpoints[*].addresses[*]}' | grep -q .; do
  echo "⏳ En attente du webhook MetalLB via EndpointSlice..."
  sleep 10
done
kubectl get pods -n metallb-system -o wide
SHELL
server.vm.provision "metallb-config", type: "shell", inline: <<-SHELL
    
    # kubectl -n metallb-system patch daemonset metallb-speaker \
    #   --type='merge' \
    #   -p '{"spec":{"template":{"spec":{"nodeSelector":{"metallb-speaker":"true"}}}}}' || true
kubectl wait --namespace metallb-system \
  --for=condition=Ready pod \
  --selector=app.kubernetes.io/component=controller \
  --timeout=60s
sudo echo "apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: my-ip-pool
  namespace: metallb-system
spec:
  addresses:
  - 192.168.10.240-192.168.10.250

---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: l2-advertisement
  namespace: metallb-system
spec:
  ipAddressPools:
  - my-ip-pool">metallb-config.yaml

kubectl apply -f metallb-config.yaml
SHELL

server.vm.provision "jenkins", type: "shell", inline: <<-SHELL
  if kubectl get namespace jenkins &> /dev/null; then
        kubectl delete namespace jenkins
  fi
   kubectl create namespace jenkins || true

    cat <<EOF | kubectl apply -f -
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: jenkins-pvc
    namespace: jenkins
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
EOF

    cat <<EOF > /tmp/jenkins-values.yaml
controller:
  serviceType: LoadBalancer
  servicePort: 8080
  admin:
    username: admin
    password: monmotdepassefort
  serviceAnnotations:
    metallb.universe.tf/address-pool: "my-ip-pool"
  startupProbe:
    enabled: false

persistence:
  enabled: true
  existingClaim: jenkins-pvc
  mountPath: /var/jenkins_home
EOF

    helm repo add jenkins https://charts.jenkins.io
    helm repo update
    helm install myjenkins jenkins/jenkins --namespace jenkins -f /tmp/jenkins-values.yaml || true
echo "adresse de jenkins : "
kubectl get svc myjenkins -n jenkins \
  -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
SHELL
  end
  agents.each do |agent_name, agent_ip|
    config.vm.define agent_name do |agent|
      agent.vm.network "public_network", ip: agent_ip
      agent.vm.synced_folder "./shared", "/vagrant_shared"
      agent.vm.hostname = agent_name
      agent.vm.provider "virtualbox" do |vb|
        vb.memory = "4096"
        vb.cpus = "2"
      end
      agent.vm.provision "cluster-k3s", type: "shell", inline: agent_script
    end
  end
end
